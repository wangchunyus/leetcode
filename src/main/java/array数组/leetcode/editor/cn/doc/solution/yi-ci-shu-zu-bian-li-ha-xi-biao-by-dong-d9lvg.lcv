看了qz一宿没睡，先写个题解再说。

题目翻译不忍直视，我再解释一下题目要求。给一个定义 “度”：表示数组中任何相同元素最多了几次，**换句话说就是你用一个哈希表去统计所有元素的出现次数，“度” 就是整个哈希表取 value 的最大值**。然后题目让你求达到这个值的 **最小** 连续子数组长度。

题目本身不难，简单的做法是先遍历一遍数组找到 “度”，然后不断滑窗找到最小。代码如下：

* []

```Java
public int findShortestSubArray(int[] nums) {
    int l = 0, r = 0, len = nums.length, res = len + 1;
    Map<Integer, Integer> map = new HashMap<>();
    int maxDegree = getDegree(nums);
    while (r < len) {
        map.put(nums[r], map.getOrDefault(nums[r], 0) + 1);
        r++;
        while (map.get(nums[r - 1]) == maxDegree) {
            map.put(nums[l], map.get(nums[l]) - 1);
            res = Math.min(res, r - l);
            l++;
        }
    }
    return res;
}

public int getDegree(int[] nums) {
    Map<Integer, Integer> map = new HashMap<>();
    int res = 0;
    for (int i : nums) {
        map.put(i, map.getOrDefault(i, 0) + 1);
        res = Math.max(res, map.get(i));
    }
    return res;
}
```

我还想到了一个 **一次遍历数组** 的解法。如果要一次遍历我们则需要记一下每个元素的第一次出现位置和当前出现了几次。我们可以把这两个变量封装为一个 Pair。具体代码如下：

* []

```Java
public int findShortestSubArray(int[] nums) {
    int len = nums.length, maxCount = 0, minWindow = 0;
    Map<Integer, int[]> map = new HashMap<>();
    for (int i = 0; i < len; i++) {
        int[] pair = map.get(nums[i]);
        if (pair == null) {
            pair = new int[]{i, 1};
            map.put(nums[i], pair);
        } else {
            pair[1]++;
        }
        if (pair[1] > maxCount) {
            maxCount = pair[1];
            minWindow = i - pair[0] + 1;
        } else if (pair[1] == maxCount) {
            minWindow = Math.min(minWindow, i - pair[0] + 1);
        }
    }
    return minWindow; 
}
```

* []

```Python
def findShortestSubArray(self, nums):
    """
    :type nums: List[int]
    :rtype: int
    """
    counter, first_pos, res, degree = {}, {}, 0, 0
    for i, a in enumerate(nums):
        first_pos.setdefault(a, i)
        counter[a] = counter.get(a, 0) + 1
        if counter[a] > degree:
            degree = counter[a]
            res = i - first_pos[a] + 1
        elif counter[a] == degree:
            res = min(res, i - first_pos[a] + 1)
    return res
```

* []

```C++
public:
    int findShortestSubArray(vector<int>& nums) {
        int res = 0, degree = 0;
        unordered_map<int, int> count, first_pos;
        for (int i = 0; i < nums.size(); ++i) {
            if (first_pos.count(nums[i]) == 0) first_pos[nums[i]] = i;
            if (++count[nums[i]] > degree) {
                degree = count[nums[i]];
                res = i - first_pos[nums[i]] + 1;
            } else if (count[nums[i]] == degree)
                res = min(res, i - first_pos[nums[i]] + 1);
        }
        return res;        
    }
```

（ C++ 和 Python 如有需要留言我会睡醒后补充，也欢迎你们来写一遍 (补上了)）

**如果有帮助记得点赞和关注^^**
