* 

```

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {

        
        // hash表
        if(nums1.length==0 || nums2.length ==0){
            return new int[0];
        }
        Set<Integer> hash1=new HashSet<Integer>();
        Set<Integer> res=new HashSet<Integer>();


        for(int i: nums1){
            hash1.add(i);
        }

        for(int j:nums2){
            if(hash1.contains(j)){
                res.add(j);
            }
        }

        int [] result = new int [res.size()];
        
        int index = 0;
        for(int k:res){
            result[index++]=k;
        }

        return result;



        // 排序+双指针
        Arrays.sort(nums1);
        Arrays.sort(nums2);

        int n1=nums1.length,n2=nums2.length;
        int i=0,j=0;
        Set<Integer> res=new HashSet<Integer>();
        while(i<n1 && j<n2){
            if(nums1[i] == nums2[j]){
                res.add(nums1[i]);
                i++;
                j++;
            }else if(nums1[i] > nums2[j]){
                j++;
            }else if(nums1[i] < nums2[j]){
                i++;
            }
        }

        int [] result = new int [res.size()];
        
        int index = 0;
        for(int k:res){
            result[index++]=k;
        }
        return result;





        //二分查找

        Set<Integer> set = new HashSet<>();
        Arrays.sort(nums2);
        for (int target : nums1) {
            if (istrue(target,nums2) && !set.contains(target)) {
            set.add(target);
            }
        }
        int index = 0;
        int[] res = new int[set.size()];
        for (int num : set) {
            res[index++] = num;
        }
        return res;
        }
        public boolean istrue(int target,int [] nums){

            int left =0,right=nums.length;
            while(left<right){
                int mid=left+(right-left)/2;
                if(target==nums[mid]){
                    return true;
                }else if(target>nums[mid]){
                    left=mid+1;
                }else if(target<nums[mid]){
                    right=mid;
                }
            }
            return false;
        }
}



```

